#!/bin/bash
source .env > /dev/null 2>&1


function backend_banner()
{
    echo " ___       _ _     ____             _                  _   ____            _           _   "
    echo " |_ _|_ __ (_) |_  | __ )  __ _  ___| | _____ _ __   __| | |  _ \ _ __ ___ (_) ___  ___| |_ "
    echo "  | || '_ \| | __| |  _ \ / _\` |/ __| |/ / _ \ '_ \ / _\` | | |_) | '__/ _ \| |/ _ \/ __| __|"
    echo "  | || | | | | |_  | |_) | (_| | (__|   <  __/ | | | (_| | |  __/| | | (_) | |  __/ (__| |_ "
    echo " |___|_| |_|_|\__| |____/ \__,_|\___|_|\_\___|_| |_|\__,_| |_|   |_|  \___// |\___|\___|\__|"
    echo "                                                                         |__/               "
}

function banner() {
    echo "    __  _  __ ____ |  |   ____  ____   _____   ____  "
    echo "\ \/ \/ // __ \|  | _/ ___\/  _ \ /     \_/ __ \ "
    echo " \     /\  ___/|  |_\  \__(  <_> )  Y Y  \  ___/ "
    echo "  \/\_/  \___  >____/\___  >____/|__|_|  /\___  >"
    echo "             \/          \/            \/     \/ "
    echo "###########################################################################################################"""
}

function is_valid_string() {
    local string=$1
    local regex="^([A-Za-z]+\.){0,}[A-Za-z]+$"

    if [[ $string =~ $regex ]]; then
        return 0
    else
        return 1
    fi
}

function get_boot_version() {
    local PS3='Please choose a spring boot version: '

    local SBS_API_OPTIONS_bootVersion=("3.2.0-SNAPSHOT" "3.2.0-M1" "3.1.3-SNAPSHOT" "3.1.2" "3.0.10-SNAPSHOT" "3.0.9" "2.7.15-SNAPSHOT" "2.7.14")
    select opt in "${SBS_API_OPTIONS_bootVersion[@]}"
    do
        case $opt in
            "3.2.0-SNAPSHOT"|"3.2.0-M1"|"3.1.3-SNAPSHOT"|"3.1.2"|"3.0.10-SNAPSHOT"|"3.0.9"|"2.7.15-SNAPSHOT"|"2.7.14")
                echo "$opt"
                break
                ;;
            *) ;;
        esac
    done
}

function get_java_version() {
    local PS3='Please choose a JAVA version: '
    local SBS_API_OPTIONS_javaVersion=("20" "17" "11" "8")
    select opt in "${SBS_API_OPTIONS_javaVersion[@]}"
    do
        case $opt in
            "20"|"17"|"11"|"8")
                echo "$opt"
                break
                ;;
            *) ;;
        esac
    done
}

function get_group_id() {
    local DEAFULT_GROUP_ID_VALUE="com.example"
    while true; do
        read -p "Plaise enter a valid group ($DEAFULT_GROUP_ID_VALUE): " groupId
        groupId=${groupId:-"$DEAFULT_GROUP_ID_VALUE"}
        if is_valid_string "$groupId" "^([A-Za-z]+\.){1,}[A-Za-z]+$"; then
            echo "$groupId"
            break
        fi
    done
}

function get_artifact_id() {
    local DEAFULT_ARTIFACT_ID_VALUE="demo"
    while true; do
        read -p "Plaise enter a valid artifact ($DEAFULT_ARTIFACT_ID_VALUE): " artifactId
        artifactId=${artifactId:-"$DEAFULT_ARTIFACT_ID_VALUE"}
        if is_valid_string "$artifactId" "^[A-Za-z]+$"; then
            echo "$artifactId"
            break
        fi
    done
}

# SBS: Spring Boot Starter
function init_backend_project() {
    backend_banner

    local SBS_API_QUERY_STRING="https://start.spring.io/starter.zip?"

    local SBS_API_VAR_type="maven-project"
    local SBS_API_VAR_language="java"
    local SBS_API_VAR_bootVersion=$(get_boot_version)
    local SBS_API_VAR_groupId=$(get_group_id)
    local SBS_API_VAR_artifactId=$(get_artifact_id)
    local SBS_API_VAR_description="Project for Spring Boot"
    local SBS_API_VAR_name=$SBS_API_VAR_artifactId
    local SBS_API_VAR_baseDir=$SBS_API_VAR_artifactId
    local SBS_API_VAR_packageName=${SBS_API_VAR_groupId}.${SBS_API_VAR_artifactId}
    local SBS_API_VAR_packaging="jar"
    local SBS_API_VAR_javaVersion=$(get_java_version)
    local SBS_API_VAR_dependencies="web,data-jpa,mysql"

    for varname in ${!SBS_API_VAR*}
    do
       local value=${!varname}
       local queryVarname=${varname:12}
       SBS_API_QUERY_STRING="${SBS_API_QUERY_STRING}${queryVarname}=${value// /%20}&"
    done
    sed -i "s/JAVA_VERSION_TAG.*$/JAVA_VERSION_TAG=${SBS_API_VAR_javaVersion}/" .env
    curl -o ./backend/${SBS_API_VAR_name}.zip $SBS_API_QUERY_STRING
    unzip ./backend/${SBS_API_VAR_name}.zip -d ./backend/
    mv ./backend/${SBS_API_VAR_name}/src ./backend/${SBS_API_VAR_name}/pom.xml ./backend
    rm -rf ./backend/${SBS_API_VAR_name} ./backend/${SBS_API_VAR_name}.zip
    mkdir ./backend/.m2 ./backend/.jar
    cat > ./backend/src/main/resources/application.properties << EOF
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://db:3306/$MYSQL_DATABASE
spring.datasource.username=$MYSQL_USER
spring.datasource.password=$MYSQL_PASSWORD
EOF
}

banner
init_backend_project